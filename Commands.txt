初始化Git仓库，使用git init命令


添加文件到Git仓库，分两步：
git add <file>	反复多次使用，添加多个文件
git commit -m <message>


要随时掌握工作区的状态，使用git status命令
如果git status告诉你有文件被修改过，用git diff可以查看修改内容


HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本
		git log --pretty=oneline 一行显示
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本


关于stage/暂存区：
git add 把更改从 工作区(Working Directory) -> 版本库(Repository)的 暂存区(Stage)
git commit 从Stage -> master，同时创建HEAD指针指向master


关于丢弃修改：
1 当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改 git checkout -- file
2 当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了1，第二步按1操作
3 已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库


删除文件 git rm <file>
恢复误删git checkout -- <file>，实际使用版本库的版本替换工作库
先手动删除文件，然后使用git rm <file>和git add<file>效果是一样的


远程仓库
ssh-keygen -t rsa -C "youremail@example.com"
创建sshkey：id_rsa是私有key要保密，id_rsa.pub是公共key，添加到GitHub的SSHKey库


关联远程仓库
cd 本地Repository
要关联一个远程库，使用 git remote add origin git@server-name:pathrepo-name.git
关联后，使用命令git push -u origin master第一次推送master分支的所有内容
每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；


克隆
git clone git@github.com:id/repository.git
还可以使用https地址 https://github.com/id/repository.git


分支
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

合并分支 git merge <branch name>
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交
用git log --graph命令可以看到分支合并图
git log --graph --pretty=oneline --abbrev-commit

Git分支十分强大，在团队开发中应该充分应用。
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并
git merge --no-ff -m "merge with no-ff" <branch name>

Bug分支/Stash：
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除
git checkout -b issue-101
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场
git stash apply恢复后 stash内容不删除
git stash pop恢复后，stash内容删除
git stash list
git stash apply stash@{0}


开发一个新feature，最好新建一个分支
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除


查看远程仓库信息 git remote
更详细信息 git remote -v
远程仓库默认名 origin
推送分支 git push origin <name>







